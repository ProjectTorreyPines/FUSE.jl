{
  "actors": {
    "ActorFRESCO": {
      "data_outputs": [
        "equilibrium.time_slice.global_quantities.magnetic_axis",
        "equilibrium.time_slice.global_quantities.psi_boundary",
        "equilibrium.time_slice.global_quantities.psi_axis",
        "equilibrium.time_slice.profiles_1d.psi",
        "equilibrium.time_slice.profiles_1d.dpressure_dpsi",
        "equilibrium.time_slice.profiles_1d.f_df_dpsi",
        "equilibrium.time_slice.profiles_1d.f",
        "equilibrium.time_slice.profiles_1d.pressure",
        "equilibrium.time_slice.profiles_2d.grid",
        "equilibrium.time_slice.profiles_2d.psi",
        "equilibrium.vacuum_toroidal_field",
        "pf_active.coil"
      ],
      "name": "ActorFRESCO",
      "physics_domain": "MHD equilibrium solving with fixed plasma boundary conditions",
      "sub_actors": [],
      "data_inputs": [
        "wall",
        "pf_active",
        "equilibrium.time_slice.profiles_1d.psi",
        "equilibrium.time_slice.profiles_1d.psi_norm",
        "equilibrium.time_slice.profiles_1d.pressure",
        "equilibrium.time_slice.global_quantities.vacuum_toroidal_field"
      ],
      "usage_notes": [
        "Requires wall information or pf_active coil data to define the computational domain",
        "Automatically constructs computational grid based on first wall geometry",
        "Reuses Green's function table when possible for computational efficiency",
        "Updates both equilibrium profiles and coil currents in the IMAS data structure",
        "Sets equilibrium as free boundary solution after solving"
      ],
      "key_parameters": {
        "number_of_iterations": "Number of outer and inner Picard iterations for convergence",
        "relax": "Relaxation parameter for Picard iterations",
        "nR": "Grid resolution in R direction",
        "nZ": "Grid resolution in Z direction",
        "active_x_points": "List of active x-points in the equilibrium solver",
        "control": "Vertical control algorithm (vertical, shape, or magnetics)",
        "fixed_grid": "Grid type for fixing pressure and current profiles (psi_norm or rho_tor_norm)",
        "tolerance": "Convergence tolerance for terminating iterations"
      },
      "category": "equilibrium",
      "description": "Fixed boundary equilibrium solver using the FRESCO library for magnetohydrodynamic equilibrium calculations",
      "hierarchy": "compound"
    },
    "ActorPowerNeeds": {
      "data_outputs": [
        "balance_of_plant.power_electric_plant_operation"
      ],
      "name": "ActorPowerNeeds",
      "physics_domain": "Balance of plant electrical systems",
      "sub_actors": [],
      "data_inputs": [
        "balance_of_plant.power_plant.power_electric_generated",
        "nbi",
        "ec_launchers",
        "ic_antennas",
        "lh_antennas",
        "global_time"
      ],
      "usage_notes": [
        "Three calculation models available: thermal_power_fraction (simple fraction), EU_DEMO (fixed subsystem values), and FUSE (self-consistent calculations)",
        "Automatically calculates heating and current drive system power needs from NBI, EC, IC, and LH systems",
        "EU_DEMO model uses fixed values: 30 MW for cryostat, 15 MW for tritium handling",
        "FUSE model provides more detailed subsystem breakdown with self-consistent pumping calculations",
        "Stores results in balance_of_plant.power_electric_plant_operation with subsystem breakdown"
      ],
      "key_parameters": {
        "model": "Power plant electrical needs model (thermal_power_fraction, EU_DEMO, or FUSE)",
        "thermal_power_fraction": "Fraction of gross electrical power for thermal cycle (used with thermal_power_fraction model)",
        "do_plot": "Enable plotting output"
      },
      "category": "balance_plant",
      "description": "Calculates the electrical power needs to operate the fusion power plant",
      "hierarchy": "single"
    },
    "ActorPedestal": {
      "data_outputs": [
        "core_profiles.profiles_1d.electrons.temperature",
        "core_profiles.profiles_1d.electrons.density_thermal",
        "core_profiles.profiles_1d.ion.temperature",
        "core_profiles.profiles_1d.ion.density_thermal",
        "core_profiles.profiles_1d.rotation_frequency_tor_sonic",
        "summary.local.pedestal",
        "summary.global_quantities.h_mode.value"
      ],
      "name": "ActorPedestal",
      "physics_domain": "Plasma edge physics and pedestal modeling",
      "sub_actors": [
        {
          "name": "ActorWPED",
          "optional": false
        },
        {
          "name": "ActorEPED",
          "optional": false
        },
        {
          "name": "ActorAnalyticPedestal",
          "optional": false
        },
        {
          "name": "ActorReplay",
          "optional": true
        },
        {
          "name": "ActorNoOperation",
          "optional": false
        }
      ],
      "data_inputs": [
        "core_profiles.profiles_1d",
        "equilibrium.time_slice",
        "pulse_schedule",
        "summary.global_quantities.h_mode"
      ],
      "usage_notes": [
        "Dynamic model requires ne_from = :pulse_schedule and advancing global time",
        "H-mode conditions are automatically detected if mode_transitions not specified",
        "EPED and WPED models only operate on temperature profiles, density handled separately",
        "Rotation model can provide linear edge rotation or replay experimental data",
        "Actor maintains state history for L-H transition dynamics",
        "Quasi-neutrality is enforced in finalization step"
      ],
      "key_parameters": {
        "rho_ped": "Defines rho at which the pedestal region starts",
        "mode_transitions": "Times at which plasma transitions between L-mode and H-mode",
        "model": "Pressure edge model selection (EPED, WPED, dynamic, analytic, replay, none)",
        "density_match": "Matching density based on ne_ped or line averaged density",
        "T_ratio_pedestal": "Ratio of ion to electron temperatures",
        "zeff_ratio_L_over_H": "Effective charge ratio between L-mode and H-mode",
        "density_ratio_L_over_H": "Density ratio between L-mode and H-mode",
        "rho_nml": "Defines rho at which the no man's land region starts",
        "tau_t": "Edge temperature L-H transition evolution time",
        "Te_sep": "Separatrix electron temperature",
        "tau_n": "Edge density L-H transition evolution time",
        "rotation_model": "Rotation edge model (linear, replay, none)"
      },
      "category": "pedestal",
      "description": "Evaluates the pedestal boundary condition (height and width) with support for L-H mode transitions and multiple pedestal models",
      "hierarchy": "compound"
    },
    "ActorPFdesign": {
      "data_outputs": [
        "pf_active"
      ],
      "name": "ActorPFdesign",
      "physics_domain": "Poloidal field coil design and optimization",
      "sub_actors": [
        {
          "name": "ActorPFactive",
          "optional": false
        }
      ],
      "data_inputs": [
        "equilibrium.time_slice",
        "build",
        "pf_active",
        "requirements.coil_j_margin"
      ],
      "usage_notes": [
        "Manipulates data in dd.pf_active",
        "Uses least-square optimization to satisfy boundary and flux/saddle constraints",
        "Optimal model includes spacing cost to prevent coils from being too close",
        "Coil sizing is based on current requirements with safety margins",
        "Can force symmetric coil placement for engineering constraints"
      ],
      "key_parameters": {
        "symmetric": "Force PF coils location to be up-down symmetric",
        "model": "Coil placement strategy (none, uniform, optimal)",
        "verbose": "Enable verbose output during optimization",
        "reset_rails": "Reset PF coils rails before optimization",
        "do_plot": "Display plot of results",
        "update_equilibrium": "Overwrite target equilibrium with the one that the coils can actually make"
      },
      "category": "pf",
      "description": "Optimizes PF coil locations to achieve desired equilibrium using various placement strategies",
      "hierarchy": "compound"
    },
    "ActorPlasmaLimits": {
      "data_outputs": [
        "dd.limits.model"
      ],
      "name": "ActorPlasmaLimits",
      "physics_domain": "Plasma stability and operational limits",
      "sub_actors": [],
      "data_inputs": [
        "dd.limits.model"
      ],
      "usage_notes": [
        "Runs all specified limit models to check plasma operational constraints",
        "Can either raise errors or issue warnings when limits are breached",
        "Provides detailed reporting of which limits passed or failed with percentages",
        "Unknown model names will trigger an UndefVarError with supported models list"
      ],
      "key_parameters": {
        "verbose": "Enable verbose output for debugging and display purposes",
        "models": "Vector of limit model names to evaluate (default uses supported_limit_models)",
        "raise_on_breach": "Whether to raise an error when operational limits are breached (default: false)"
      },
      "category": "stability",
      "description": "Evaluates plasma operational limits using multiple limit models and reports breaches",
      "hierarchy": "compound"
    },
    "ActorEPEDprofiles": {
      "data_outputs": [
        "core_profiles.profiles_1d.electrons.temperature",
        "core_profiles.profiles_1d.electrons.density_thermal",
        "core_profiles.profiles_1d.ion.temperature",
        "core_profiles.profiles_1d.ion.density_thermal",
        "core_sources"
      ],
      "name": "ActorEPEDprofiles",
      "physics_domain": "Pedestal transport and profile modeling",
      "sub_actors": [],
      "data_inputs": [
        "core_profiles.profiles_1d",
        "pulse_schedule",
        "equilibrium"
      ],
      "usage_notes": [
        "Uses EPED model to determine pedestal pressure and width",
        "Preserves on-axis values of plasma profiles",
        "Updates both electron and ion temperature and density profiles",
        "Maintains ion-to-electron density ratios when updating profiles",
        "Automatically updates core sources after profile modifications",
        "Will error if resulting temperature or density profiles become negative"
      ],
      "key_parameters": {
        "Te_shaping": "Shaping coefficient for the temperature profile",
        "T_ratio_core": "Ion to electron temperature ratio in the core",
        "ne_shaping": "Shaping coefficient for the density profile",
        "T_ratio_pedestal": "Ion to electron temperature ratio in the pedestal"
      },
      "category": "transport",
      "description": "Updates pedestal height and width and blends with core profiles that are defined by shaping factors. Does not change on-axis values of plasma profiles.",
      "hierarchy": "compound"
    },
    "ActorSawteeth": {
      "data_outputs": [
        "core_sources",
        "core_profiles"
      ],
      "name": "ActorSawteeth",
      "physics_domain": "MHD instabilities and magnetic reconnection",
      "sub_actors": [],
      "data_inputs": [
        "core_profiles.profiles_1d.q",
        "core_profiles.profiles_1d.grid.rho_tor_norm"
      ],
      "usage_notes": [
        "Finds the last radial position where q < 1.0 and applies sawteeth modifications",
        "Uses IMAS.sawteeth_source! and IMAS.sawteeth_profiles! functions",
        "Profile modifications are currently commented out to avoid large bootstrap current jumps"
      ],
      "key_parameters": {
        "q_threshold": "Safety factor threshold of 1.0 for sawteeth trigger"
      },
      "category": "transport",
      "description": "Applies sawteeth reconnection to core sources and profiles when q < 1.0",
      "hierarchy": "single"
    },
    "ActorCosting": {
      "data_outputs": [
        "dd.costing",
        "dd.costing.construction_start_year",
        "dd.costing.future.inflation_rate",
        "dd.costing.plant_lifetime",
        "dd.costing.availability",
        "dd.costing.future.learning.hts.production_increase",
        "dd.costing.future.learning.hts.learning_rate"
      ],
      "name": "ActorCosting",
      "physics_domain": "Economic modeling and cost analysis",
      "sub_actors": [
        {
          "name": "ActorCostingSheffield",
          "optional": true
        },
        {
          "name": "ActorCostingARIES",
          "optional": true
        }
      ],
      "data_inputs": [
        "dd.costing"
      ],
      "usage_notes": [
        "Stores data in dd.costing",
        "Switches between Sheffield and ARIES costing models based on model parameter",
        "Production increase must be >= 0.0",
        "Learning rate must be between 0.0 and 1.0",
        "Uses Measurement{Float64} for uncertainty quantification"
      ],
      "key_parameters": {
        "future_inflation_rate": "Predicted average rate of future inflation",
        "production_increase": "Factor by which production of ReBCO multiplies per year",
        "model": "Costing model selection (ARIES or Sheffield)",
        "plant_lifetime": "Lifetime of the plant in years",
        "learning_rate": "Learning rate for ReBCO technology production",
        "availability": "Availability fraction of the plant",
        "construction_start_year": "Year that plant construction begins"
      },
      "category": "costing",
      "description": "Estimates the cost of building, operating, and decommissioning the fusion power plant",
      "hierarchy": "compound"
    },
    "ActorStresses": {
      "data_outputs": [
        "dd.solid_mechanics.center_stack.stress",
        "dd.solid_mechanics.center_stack.displacement",
        "dd.solid_mechanics.center_stack.grid"
      ],
      "name": "ActorStresses",
      "physics_domain": "Structural mechanics and stress analysis",
      "sub_actors": [],
      "data_inputs": [
        "dd.equilibrium.vacuum_toroidal_field.b0",
        "dd.build.layer",
        "dd.build.oh.max_b_field",
        "dd.build.tf.technology.fraction_steel",
        "dd.build.oh.technology.fraction_steel",
        "dd.build.tf.nose_hfs_fraction",
        "dd.solid_mechanics.center_stack.bucked",
        "dd.solid_mechanics.center_stack.noslip",
        "dd.solid_mechanics.center_stack.plug",
        "dd.solid_mechanics.center_stack.properties"
      ],
      "usage_notes": [
        "Based on Leuer 1D solid mechanics equations for tokamak center stack analysis",
        "Supports multiple coil configurations: free standing, bucked OH-TF, bucked plug-OH-TF",
        "Calculates radial, hoop, axial, and Von Mises stresses for TF, OH, and plug components",
        "Accounts for structural material fractions and boundary conditions",
        "Stores results in dd.solid_mechanics for worst-case stress scenarios"
      ],
      "key_parameters": {
        "do_plot": "Flag to display stress plot after computation",
        "n_points": "Number of radial grid points for stress calculations"
      },
      "category": "build",
      "description": "Estimates mechanical stresses on the center stack using 1D solid mechanics equations",
      "hierarchy": "single"
    },
    "ActorCostingSheffield": {
      "data_outputs": [
        "dd.costing.cost_direct_capital",
        "dd.costing.cost_operations",
        "dd.costing.levelized_CoE"
      ],
      "name": "ActorCostingSheffield",
      "physics_domain": "Economic analysis and cost estimation for fusion reactors",
      "sub_actors": [],
      "data_inputs": [
        "dd.build",
        "dd.ec_launchers.beam",
        "dd.ic_antennas.antenna",
        "dd.lh_antennas.antenna",
        "dd.nbi.unit",
        "dd.neutronics.time_slice",
        "dd.balance_of_plant",
        "dd.equilibrium.time_slice"
      ],
      "usage_notes": [
        "Based on Sheffield and Milora cost methodology from FS&T 70 (2016)",
        "Calculates direct capital costs for major reactor systems including TF coils, shields, structure, auxiliary power, blanket, and divertor",
        "Includes yearly operational costs for fuel, blanket/divertor replacement, and operations & maintenance",
        "Computes levelized cost of electricity (LCOE) including capitalization and indirect charges",
        "Uses dollar adjustment for inflation correction to current year values",
        "Assumes 20% of first wall is covered by divertor for area calculations"
      ],
      "key_parameters": {
        "capitalize_divertor": "Include cost of 1st divertor in direct capital cost (default: true)",
        "blanket_fluence_lifetime": "Blanket fluence over its lifetime in MW*yr/m² (default: 15.0 ± 2.0)",
        "fixed_charge_rate": "Constant dollar fixed charge rate (default: 0.08 ± 0.01)",
        "capitalize_blanket": "Include cost of 1st blanket in direct capital cost (default: true)",
        "divertor_fluence_lifetime": "Divertor fluence over its lifetime in MW*yr/m² (default: 10.0 ± 2.0)",
        "construction_lead_time": "Duration of construction in years (default: 10.0 ± 2.0)"
      },
      "category": "costing",
      "description": "Estimates fusion reactor costing based on Sheffield and Milora methodology from Fusion Science & Technology 70 (2016)",
      "hierarchy": "single"
    },
    "ActorCHEASE": {
      "data_outputs": [
        "equilibrium.time_slice.global_quantities.magnetic_axis",
        "equilibrium.time_slice.global_quantities.free_boundary",
        "equilibrium.time_slice.profiles_1d.psi",
        "equilibrium.time_slice.profiles_1d.q",
        "equilibrium.time_slice.profiles_1d.pressure",
        "equilibrium.time_slice.profiles_1d.dpressure_dpsi",
        "equilibrium.time_slice.profiles_1d.f",
        "equilibrium.time_slice.profiles_1d.f_df_dpsi",
        "equilibrium.time_slice.profiles_2d.grid",
        "equilibrium.time_slice.profiles_2d.psi",
        "equilibrium.vacuum_toroidal_field",
        "pf_active.coil"
      ],
      "name": "ActorCHEASE",
      "physics_domain": "Plasma equilibrium and magnetic field reconstruction",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice.boundary.outline",
        "equilibrium.time_slice.global_quantities.ip",
        "equilibrium.time_slice.global_quantities.vacuum_toroidal_field",
        "equilibrium.time_slice.profiles_1d.psi_norm",
        "equilibrium.time_slice.profiles_1d.j_tor",
        "equilibrium.time_slice.profiles_1d.pressure",
        "pf_active.coil",
        "build"
      ],
      "usage_notes": [
        "Requires boundary outline, pressure profile, and toroidal current density as inputs",
        "Can convert fixed boundary solutions to free boundary using VacuumFields",
        "Uses CHEASE external solver for high-precision equilibrium calculations",
        "Handles coordinate system conversion from COCOS 1 to COCOS 11",
        "May display diagnostic plots if errors occur during execution"
      ],
      "key_parameters": {
        "clear_workdir": "Clean the temporary workdir for CHEASE",
        "free_boundary": "Convert fixed boundary equilibrium to free boundary one",
        "rescale_eq_to_ip": "Scale equilibrium to match plasma current"
      },
      "category": "equilibrium",
      "description": "Fixed boundary equilibrium solver using CHEASE code with optional conversion to free boundary",
      "hierarchy": "compound"
    },
    "ActorWholeFacility": {
      "data_outputs": [
        "dd.build",
        "dd.equilibrium",
        "dd.core_profiles",
        "dd.pf_active",
        "dd.pf_passive",
        "dd.neutronics",
        "dd.blanket",
        "dd.divertors",
        "dd.balance_of_plant",
        "dd.costing"
      ],
      "name": "ActorWholeFacility",
      "physics_domain": "Integrated plant modeling and optimization",
      "sub_actors": [
        {
          "name": "ActorStationaryPlasma",
          "optional": true
        },
        {
          "name": "ActorPlasmaLimits",
          "optional": true
        },
        {
          "name": "ActorFluxSwing",
          "optional": true
        },
        {
          "name": "ActorStresses",
          "optional": true
        },
        {
          "name": "ActorHFSsizing",
          "optional": true
        },
        {
          "name": "ActorLFSsizing",
          "optional": true
        },
        {
          "name": "ActorCXbuild",
          "optional": true
        },
        {
          "name": "ActorPFdesign",
          "optional": true
        },
        {
          "name": "ActorPFactive",
          "optional": true
        },
        {
          "name": "ActorPassiveStructures",
          "optional": true
        },
        {
          "name": "ActorVerticalStability",
          "optional": true
        },
        {
          "name": "ActorNeutronics",
          "optional": true
        },
        {
          "name": "ActorBlanket",
          "optional": true
        },
        {
          "name": "ActorDivertors",
          "optional": true
        },
        {
          "name": "ActorBalanceOfPlant",
          "optional": true
        },
        {
          "name": "ActorCosting",
          "optional": true
        }
      ],
      "data_inputs": [
        "dd.build.layer",
        "dd.pulse_schedule"
      ],
      "usage_notes": [
        "Stores data in dd",
        "Skips engineering/costing actors if build is missing",
        "PF coil positioning is optimized before and after build changes",
        "First wall is rebuilt based on new equilibrium if enabled",
        "Build layers are regenerated after blanket optimization"
      ],
      "key_parameters": {
        "update_build": "Optimize tokamak build",
        "update_plasma": "Run plasma related actors"
      },
      "category": "compound",
      "description": "Compound actor that runs all physics, engineering and costing actors needed to model the whole fusion plant",
      "hierarchy": "compound"
    },
    "ActorNoOperation": {
      "data_outputs": [],
      "name": "ActorNoOperation",
      "physics_domain": "utility",
      "sub_actors": [],
      "data_inputs": [],
      "usage_notes": [
        "This actor doesn't do anything and can be useful to turn off models",
        "Acts as a placeholder or null object pattern implementation",
        "The _step and _finalize methods return the actor unchanged"
      ],
      "key_parameters": {},
      "category": "uncategorized",
      "description": "A no-operation actor that doesn't perform any actions. Used to turn off models or as a placeholder.",
      "hierarchy": "single"
    },
    "ActorCostingARIES": {
      "data_outputs": [
        "dd.costing.cost_direct_capital",
        "dd.costing.cost_operations",
        "dd.costing.cost_decommissioning",
        "dd.costing.cost_lifetime",
        "dd.costing.levelized_CoE"
      ],
      "name": "ActorCostingARIES",
      "physics_domain": "Economic analysis and cost modeling",
      "sub_actors": [],
      "data_inputs": [
        "dd.build.layer",
        "dd.pf_active",
        "dd.ec_launchers.beam",
        "dd.ic_antennas.antenna",
        "dd.lh_antennas.antenna",
        "dd.nbi.unit",
        "dd.balance_of_plant",
        "dd.build.tf",
        "dd.build.oh",
        "dd.build.pf_active"
      ],
      "usage_notes": [
        "Based on ARIES cost account documentation (UCSD-CER-13-01.pdf)",
        "Calculates direct capital costs, operations costs, and decommissioning costs",
        "Computes levelized cost of electricity (LCOE)",
        "Includes costs for tokamak components, facility infrastructure, and balance of plant",
        "Accounts for different heating and current drive systems (ECH, ICRF, LHCD, NBI)",
        "Uses dollar adjustment factors for inflation from different assessment years"
      ],
      "key_parameters": {
        "escalation_fraction": "Yearly escalation fraction based on risk assessment (default: 0.05 ± 0.01)",
        "building_volume": "Volume of the tokamak building in m³ (default: 140e3 ± 14e3)",
        "land_space": "Plant site space required in acres (default: 1000.0 ± 100.0)",
        "interest_rate": "Annual interest rate fraction of direct capital cost (default: 0.05 ± 0.01)",
        "indirect_cost_rate": "Indirect cost for construction, equipment, services (default: 0.4 ± 0.01)",
        "blanket_lifetime": "Lifetime of the blanket in years (default: 7.0 ± 1.0)"
      },
      "category": "costing",
      "description": "Estimates tokamak fusion reactor costing based on ARIES cost account documentation",
      "hierarchy": "single"
    },
    "ActorCoreRadHeatFlux": {
      "data_outputs": [
        "wall.first_wall.heat_flux"
      ],
      "name": "ActorCoreRadHeatFlux",
      "physics_domain": "Wall loading and heat flux from core radiation",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "core_profiles.profiles_1d",
        "core_sources",
        "global_time"
      ],
      "usage_notes": [
        "Uses Monte Carlo photon transport with N launched particles",
        "Requires equilibrium and core profiles data to be available",
        "Wall mesh is generated using the same approach as ActorParticleHeatFlux",
        "Negative sign applied to core_sources radiation because it represents energy loss",
        "Plotting capability available when do_plot=true showing 1D heat flux profile and 2D photon trajectories"
      ],
      "key_parameters": {
        "levels": "Number of flux surface levels in SOL or explicit psi levels for mesh generation",
        "step": "Discretization step size for default wall mesh in meters (default: 0.1)",
        "N": "Number of launched photons for Monte Carlo simulation (default: 100000)",
        "r": "Vector of radial positions at outer midplane for heat flux boundary conditions",
        "q": "Vector of parallel power density at outer midplane",
        "merge_wall": "Whether to merge dd.wall geometry in mesh for heat flux calculation"
      },
      "category": "wall_loading",
      "description": "Computes the heat flux on the wall due to core radiation using photon transport simulation",
      "hierarchy": "single"
    },
    "ActorPassiveStructures": {
      "data_outputs": [
        "pf_passive"
      ],
      "name": "ActorPassiveStructures",
      "physics_domain": "Poloidal field and passive structures",
      "sub_actors": [],
      "data_inputs": [
        "build.layer"
      ],
      "usage_notes": [
        "Requires vacuum vessel layers to be defined in build.layer",
        "Warns if no vessel found - cannot compute vertical stability metrics",
        "Uses material electrical conductivity from outermost build layer",
        "Falls back to steel material if conductivity data missing",
        "Does not account for toroidal breaks, heterogeneous materials, or water vacuum vessels",
        "Generates quadrilateral elements representing passive conducting structures"
      ],
      "key_parameters": {
        "wall_precision": "Precision for making wall quadralaterals (default: 1.0)",
        "min_n_segments": "Minimum number of quadralaterals (default: 15)",
        "do_plot": "Display plotting option (default: false)"
      },
      "category": "pf",
      "description": "Populates pf_passive IDS based on the vacuum vessel layer(s) for passive structure modeling in poloidal field calculations",
      "hierarchy": "single"
    },
    "ActorLFSsizing": {
      "data_outputs": [
        "dd.build.layer"
      ],
      "name": "ActorLFSsizing",
      "physics_domain": "tokamak radial build and TF coil placement",
      "sub_actors": [],
      "data_inputs": [
        "dd.build.layer",
        "dd.build.tf.ripple",
        "dd.build.tf.coils_n"
      ],
      "usage_notes": [
        "Manipulates radial build information in dd.build.layer",
        "Calculates TF leg radius based on required TF field ripple constraints",
        "Considers vacuum port geometry for maintenance access when maintenance is not :none",
        "New TF radius is determined by the larger of ripple or maintenance constraints",
        "Resizes first vacuum gap between vacuum vessel and plasma to accommodate TF repositioning",
        "Ensures modified vacuum layer thickness is not less than corresponding HFS thickness"
      ],
      "key_parameters": {
        "pol_modularity": "Number of poloidal modules of each toroidal blanket sector (1 or 2)",
        "tor_modularity": "Number of toroidal modules of blanket normalized to number of TF coils",
        "verbose": "Enable verbose output for debugging",
        "maintenance": "Scheme for installation/removal of in-vessel components (vertical, horizontal, or none)",
        "do_plot": "Enable plotting of build layers"
      },
      "category": "build",
      "description": "Resizes the Low Field Side of the tokamak radial build by adjusting the location of the outer TF leg to account for ripple and maintenance port requirements",
      "hierarchy": "single"
    },
    "ActorCXbuild": {
      "data_outputs": [
        "dd.build.layer.outline",
        "dd.build.structure",
        "dd.wall.description_2d.limiter.outline",
        "dd.divertors.divertor"
      ],
      "name": "ActorCXbuild",
      "physics_domain": "Mechanical engineering and tokamak geometry",
      "sub_actors": [],
      "data_inputs": [
        "dd.equilibrium.time_slice",
        "dd.wall",
        "dd.pulse_schedule.position_control",
        "dd.pf_active",
        "dd.divertors"
      ],
      "usage_notes": [
        "Manipulates data in dd.build",
        "Requires equilibrium data to generate wall geometry",
        "Can optionally plot the build cross-section with do_plot parameter",
        "Handles both upper and lower divertor configurations",
        "Supports different maintenance port types (none, vertical, horizontal)"
      ],
      "key_parameters": {
        "rebuild_wall": "Rebuild wall based on equilibrium, even if dd.wall is already filled",
        "layers_aware_of_pf_coils": "Build layers are aware of pf_active coils",
        "divertor_lfs_size_fraction": "Divertor size on the low-field-side as fraction of plasma minor radius",
        "n_points": "Number of points used for cross-sectional outlines",
        "divertor_hfs_size_fraction": "Divertor size on the high-field-side as fraction of plasma minor radius"
      },
      "category": "build",
      "description": "Generates the 2D cross section of the tokamak build including layers, wall, divertors, blankets, and maintenance ports",
      "hierarchy": "compound"
    },
    "ActorNeutronics": {
      "data_outputs": [
        "neutronics.first_wall.r",
        "neutronics.first_wall.z",
        "neutronics.time_slice.wall_loading.flux_r",
        "neutronics.time_slice.wall_loading.flux_z",
        "neutronics.time_slice.wall_loading.power"
      ],
      "name": "ActorNeutronics",
      "physics_domain": "Neutronics and radiation transport",
      "sub_actors": [],
      "data_inputs": [
        "core_profiles.profiles_1d",
        "equilibrium.time_slice",
        "wall"
      ],
      "usage_notes": [
        "Requires fusion power data from core profiles for proper normalization",
        "Wall geometry must be defined in dd.wall for flux calculations",
        "Uses Monte Carlo particle tracing to determine neutron wall loading",
        "Automatically renormalizes results to match total fusion neutron power",
        "Wall path is resampled and reordered to ensure proper flux calculations"
      ],
      "key_parameters": {
        "N": "Number of neutron particles to simulate for Monte Carlo calculation",
        "do_plot": "Enable plotting of neutron flux distribution and wall loading"
      },
      "category": "nuclear",
      "description": "Estimates neutron wall loading from fusion reactions and calculates neutron flux distribution on the first wall",
      "hierarchy": "single"
    },
    "ActorAnalyticPedestal": {
      "data_outputs": [
        "summary.local.pedestal"
      ],
      "name": "ActorAnalyticPedestal",
      "physics_domain": "Plasma edge physics and pedestal modeling",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice.global_quantities.vacuum_toroidal_field",
        "equilibrium.time_slice.boundary.geometric_axis",
        "equilibrium.time_slice.profiles_1d",
        "equilibrium.time_slice.global_quantities.length_pol",
        "equilibrium.time_slice.global_quantities.ip",
        "core_profiles.profiles_1d.grid.rho_tor_norm",
        "core_profiles.profiles_1d.electrons.density_thermal",
        "core_profiles.global_quantities.beta_tor_norm"
      ],
      "usage_notes": [
        "Uses different scaling models: TE_MAST (w_ped~beta_p,ped^0.5), TE_NSTX (w_ped~beta_p,ped^1.0), and hiped_MASTU",
        "Pedestal density is taken at rho=0.9 throughout FUSE",
        "Width definition follows EPED convention (half-width)",
        "Default coefficients are provided for each model if not specified",
        "HIPED model is specifically designed for spherical tokamaks"
      ],
      "key_parameters": {
        "rho_ped": "Defines rho at which the pedestal region starts",
        "width_coefficient": "Pedestal width coefficient C2",
        "height_coefficient": "Pedestal height coefficient C1",
        "rho_nml": "Defines rho at which the no man's land region starts",
        "model": "Pedestal width model (:hiped_MASTU, :TE_MAST, :TE_NSTX)",
        "T_ratio_pedestal": "Ratio of ion to electron temperatures",
        "Te_sep": "Separatrix electron temperature (default: 80.0)",
        "ped_factor": "Pedestal height multiplier (width scaled by sqrt of this factor)"
      },
      "category": "pedestal",
      "description": "Evaluates the pedestal boundary condition (height and width) using analytic models",
      "hierarchy": "single"
    },
    "ActorCoreTransport": {
      "data_outputs": [
        "core_profiles.profiles_1d.electrons.density_thermal",
        "core_profiles.profiles_1d.electrons.temperature",
        "core_profiles.profiles_1d.ion.density_thermal",
        "core_profiles.profiles_1d.ion.temperature",
        "core_profiles.profiles_1d.rotation_frequency_tor_sonic"
      ],
      "name": "ActorCoreTransport",
      "physics_domain": "Core plasma transport and profile evolution",
      "sub_actors": [
        {
          "name": "ActorFluxMatcher",
          "optional": true
        },
        {
          "name": "ActorEPEDprofiles",
          "optional": true
        },
        {
          "name": "ActorReplay",
          "optional": true
        },
        {
          "name": "ActorNoOperation",
          "optional": true
        }
      ],
      "data_inputs": [
        "core_profiles.profiles_1d.grid.rho_tor_norm",
        "core_profiles.profiles_1d.electrons.density_thermal",
        "core_profiles.profiles_1d.electrons.temperature",
        "core_profiles.profiles_1d.ion.density_thermal",
        "core_profiles.profiles_1d.ion.temperature",
        "core_profiles.profiles_1d.rotation_frequency_tor_sonic",
        "core_profiles.profiles_1d.zeff",
        "global_time"
      ],
      "usage_notes": [
        "Acts as a dispatcher to different transport models based on the model parameter",
        "When using replay mode, blends replay core profiles with edge profiles at transport boundary",
        "Ion densities are scaled to match target Zeff when in replay mode",
        "Default model is FluxMatcher if not specified"
      ],
      "key_parameters": {
        "model": "Selects which transport model to use: FluxMatcher, EPEDProfiles, replay, or none"
      },
      "category": "transport",
      "description": "Provides a common interface to run multiple core transport actors with selectable transport models",
      "hierarchy": "compound"
    },
    "ActorSimpleEC": {
      "data_outputs": [
        "dd.waves.coherent_wave",
        "dd.core_sources.source",
        "dd.ec_launchers.beam.power_launched"
      ],
      "name": "ActorSimpleEC",
      "physics_domain": "electron cyclotron heating and current drive",
      "sub_actors": [],
      "data_inputs": [
        "dd.equilibrium.time_slice",
        "dd.core_profiles.profiles_1d",
        "dd.ec_launchers",
        "dd.pulse_schedule.ec",
        "dd.global_time"
      ],
      "usage_notes": [
        "Current drive efficiency is based on GASC model from G. Tonon paper",
        "Uses vacuum ray tracing for beam path calculation",
        "Automatically sets up EC beam parameters if missing (frequency, launch position, steering angles)",
        "Estimates operating frequency and mode from equilibrium resonance",
        "Warns if ECH beam does not intersect resonance layer"
      ],
      "key_parameters": {
        "rho_0": "Desired radial location of the deposition profile (default: 0.5)",
        "width": "Desired width of the deposition profile (default: 0.025)",
        "ηcd_scale": "Scaling factor for nominal current drive efficiency (default: 1.0)"
      },
      "category": "ec",
      "description": "Simple EC (electron cyclotron) actor that estimates electron energy deposition and current drive as gaussian profiles",
      "hierarchy": "single"
    },
    "ActorParticleHeatFlux": {
      "data_outputs": [
        "wall.wall_2d[:].heat_flux_parallel",
        "wall.wall_2d[:].heat_flux_perpendicular"
      ],
      "name": "ActorParticleHeatFlux",
      "physics_domain": "Plasma-wall interactions and particle heat loading",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium",
        "core_profiles",
        "wall"
      ],
      "usage_notes": [
        "Uses mesher_heat_flux to compute wall mesh with SOL intersections",
        "Computes both parallel and perpendicular components of particle heat flux",
        "Wall mesh includes curvilinear abscissa starting clockwise from outer midplane",
        "Results stored in wall_heat_flux field but dd population is work in progress"
      ],
      "key_parameters": {
        "levels": "Number of flux surface levels in SOL or vector of psi levels (default: 20)",
        "step": "Step size for discretization of the wall mesh (m, default: 0.1)",
        "r": "Vector of r positions at outer midplane for power density profile (m)",
        "q": "Vector of parallel power density at outer midplane (W m^-2)",
        "do_plot": "Enable plotting of heat flux results",
        "merge_wall": "Whether to merge dd.wall geometry in mesh for heat flux calculation"
      },
      "category": "wall_loading",
      "description": "Computes the heat flux on the wall due to charged particles in the plasma",
      "hierarchy": "single"
    },
    "ActorAnalyticTurbulence": {
      "data_outputs": [
        "core_transport.model.profiles_1d"
      ],
      "name": "ActorAnalyticTurbulence",
      "physics_domain": "Plasma turbulent transport modeling",
      "sub_actors": [],
      "data_inputs": [
        "core_profiles.profiles_1d",
        "equilibrium.time_slice.profiles_1d",
        "equilibrium.time_slice.global_quantities.magnetic_axis"
      ],
      "usage_notes": [
        "GyroBohm model provides simple unity flux solution",
        "BgB model combines Bohm and gyro-Bohm scaling with detailed physics calculations",
        "Transport coefficients are normalized to gyro-Bohm reference values",
        "Results written to core_transport.model with anomalous transport identifier"
      ],
      "key_parameters": {
        "χeGB_coefficient": "Coefficient of gyro-Bohm component in electron heat diffusivity",
        "model": "Switch between GyroBohm and BgB transport models",
        "αBgB": "Scale factor for BgB transport model",
        "rho_transport": "Radial grid points where transport fluxes are computed",
        "χeB_coefficient": "Coefficient of Bohm component in electron heat diffusivity",
        "χiGB_coefficient": "Coefficient of gyro-Bohm component in ion heat diffusivity",
        "χiB_coefficient": "Coefficient of Bohm component in ion heat diffusivity"
      },
      "category": "transport",
      "description": "Evaluates analytic turbulence models for plasma transport, including GyroBohm and BgB (Bohm + gyro-Bohm) models",
      "hierarchy": "single"
    },
    "ActorQLGYRO": {
      "data_outputs": [
        "core_transport.model.profiles_1d"
      ],
      "name": "ActorQLGYRO",
      "physics_domain": "Turbulent transport and gyrokinetic modeling",
      "sub_actors": [],
      "data_inputs": [
        "core_profiles.profiles_1d",
        "equilibrium.time_slice"
      ],
      "usage_notes": [
        "Requires GACODE and TurbulentTransport packages to be available",
        "Computes turbulent fluxes at specified radial locations using quasilinear theory",
        "Results are written to core_transport.model with identifier 'QLGYRO'",
        "Uses CGYRO for linear stability analysis and QLGYRO for quasilinear flux prediction",
        "n_field parameter must be between 1 and 3 inclusive"
      ],
      "key_parameters": {
        "max_time": "Maximum simulation time in units of a/cs",
        "rho_transport": "Normalized toroidal flux coordinates where fluxes are computed",
        "lump_ions": "Whether to lump fuel species (D,T) and impurities together",
        "cpu_per_ky": "Number of CPUs allocated per ky mode",
        "nky": "Number of ky modes to simulate",
        "sat_rule": "Saturation rule for turbulence (sat1, sat2, or sat3)",
        "ky": "Maximum ky wavenumber for turbulence calculation",
        "kygrid_model": "TGLF ky grid model selection",
        "n_field": "Number of fields: 1=phi, 2=phi+apar, 3=phi+apar+bpar",
        "delta_t": "CGYRO simulation time step size"
      },
      "category": "transport",
      "description": "Evaluates turbulent transport fluxes using the QLGYRO quasilinear gyrokinetic model",
      "hierarchy": "single"
    },
    "ActorThermalPlant": {
      "data_outputs": [
        "balance_of_plant.thermal_efficiency_plant",
        "balance_of_plant.power_plant.total_heat_supplied",
        "balance_of_plant.power_plant.power_electric_generated"
      ],
      "name": "ActorThermalPlant",
      "physics_domain": "Thermal power cycle and balance of plant systems",
      "sub_actors": [
        {
          "name": "ActorNoOperation",
          "optional": false
        },
        {
          "name": "ActorThermalSystemModels",
          "optional": true
        }
      ],
      "data_inputs": [
        "balance_of_plant.power_plant.heat_load.breeder",
        "balance_of_plant.power_plant.heat_load.divertor",
        "balance_of_plant.power_plant.heat_load.wall",
        "balance_of_plant.power_plant.power_cycle_type"
      ],
      "usage_notes": [
        "Requires blanket to be present (breeder_heat_load > 0) to perform calculations",
        "Three calculation modes: fixed efficiency, surrogate model, or ThermalSystemModels extension",
        "Surrogate mode uses BalanceOfPlantSurrogate.BOPsurrogate for efficiency calculation",
        "Network mode requires ThermalSystemModels extension to be loaded"
      ],
      "key_parameters": {
        "model": "Power plant heat cycle efficiency model selection (fixed_plant_efficiency, network, surrogate)",
        "fixed_plant_efficiency": "Overall thermal cycle efficiency when using fixed efficiency model (default: 0.35)"
      },
      "category": "balance_plant",
      "description": "Provides a common interface to run different thermal plant actors for calculating power cycle efficiency and electric power generation",
      "hierarchy": "compound"
    },
    "ActorSimpleNB": {
      "data_outputs": [
        "dd.core_sources",
        "dd.waves.coherent_wave"
      ],
      "name": "ActorSimpleNB",
      "physics_domain": "Neutral Beam Injection heating and current drive",
      "sub_actors": [],
      "data_inputs": [
        "dd.nbi",
        "dd.pulse_schedule",
        "dd.equilibrium.time_slice",
        "dd.core_profiles.profiles_1d"
      ],
      "usage_notes": [
        "Uses pencil beam approximation for NBI deposition calculations",
        "Includes banana orbit corrections and current drive effects",
        "Calculates both electron and ion heating fractions using Sivukhin model",
        "Smooths beam power based on fast ion thermalization time",
        "Stores beam trajectory information in waves structure"
      ],
      "key_parameters": {
        "smoothing_width": "Width of the deposition profile (default: 0.12)",
        "banana_shift_fraction": "Shift factor for banana orbit effects (default: 0.5)"
      },
      "category": "nbi",
      "description": "Calculates NBI ion/electron energy deposition, particle source, rotation and current drive source with a pencil beam model",
      "hierarchy": "single"
    },
    "ActorFluxCalculator": {
      "data_outputs": [],
      "name": "ActorFluxCalculator",
      "physics_domain": "Plasma transport physics - turbulent and neoclassical transport modeling",
      "sub_actors": [
        {
          "name": "ActorTGLF",
          "optional": true
        },
        {
          "name": "ActorQLGYRO",
          "optional": true
        },
        {
          "name": "ActorAnalyticTurbulence",
          "optional": true
        },
        {
          "name": "ActorNeoclassical",
          "optional": true
        },
        {
          "name": "ActorNoOperation",
          "optional": true
        }
      ],
      "data_inputs": [],
      "usage_notes": [
        "Acts as a dispatcher that selects and runs appropriate transport model actors based on configuration",
        "Can combine different turbulence models (TGLF, QLGYRO, analytic) with neoclassical transport",
        "Uses ActorNoOperation when transport models are disabled",
        "Both turbulence and neoclassical models can be independently enabled or disabled"
      ],
      "key_parameters": {
        "neoclassical_model": "Neoclassical model selection: neoclassical or none (default: neoclassical)",
        "rho_transport": "Radial transport grid points (default: 0.25:0.1:0.85)",
        "turbulence_model": "Turbulence model selection: TGLF, QLGYRO, analytic, or none (default: TGLF)"
      },
      "category": "transport",
      "description": "Provides a common interface to run multiple transport model actors, combining turbulence and neoclassical transport calculations",
      "hierarchy": "compound"
    },
    "ActorHFSsizing": {
      "data_outputs": [
        "dd.build.layer",
        "dd.build.oh.thickness",
        "dd.build.tf.thickness",
        "dd.build.oh.technology.fraction_steel",
        "dd.build.tf.technology.fraction_steel",
        "dd.build.tf.nose_hfs_fraction",
        "dd.build.oh.flattop_duration",
        "dd.solid_mechanics.center_stack.stress"
      ],
      "name": "ActorHFSsizing",
      "physics_domain": "Tokamak mechanical design and electromagnetic optimization",
      "sub_actors": [
        {
          "name": "ActorStresses",
          "optional": false
        },
        {
          "name": "ActorFluxSwing",
          "optional": false
        }
      ],
      "data_inputs": [
        "dd.build.layer",
        "dd.equilibrium.time_slice",
        "dd.requirements.coil_j_margin",
        "dd.requirements.coil_stress_margin",
        "dd.requirements.flattop_duration",
        "dd.solid_mechanics.center_stack",
        "dd.build.oh",
        "dd.build.tf"
      ],
      "usage_notes": [
        "Uses metaheuristic optimization (ECA algorithm) to find optimal center stack dimensions",
        "Accounts for superconductor critical current limits and mechanical stress constraints",
        "Optimizes TF coil thickness, OH coil thickness, and steel fractions simultaneously",
        "Handles both bucked and unbucked TF coil configurations",
        "May fail if constraints cannot be satisfied - check margins and requirements"
      ],
      "key_parameters": {
        "error_on_technology": "Error if build stresses and current limits are not met",
        "error_on_performance": "Error if requested Bt and flattop duration are not met",
        "verbose": "Print detailed optimization results and constraints",
        "do_plot": "Generate diagnostic plots of optimization process"
      },
      "category": "build",
      "description": "Resizes the High Field Side tokamak radial build, optimizing center stack dimensions (plug, OH, TF) for stresses, critical currents, flux swing, and field requirements",
      "hierarchy": "compound"
    },
    "ActorStationaryPlasma": {
      "data_outputs": [
        "equilibrium",
        "core_profiles",
        "core_sources",
        "core_transport"
      ],
      "name": "ActorStationaryPlasma",
      "physics_domain": "Plasma equilibrium and transport",
      "sub_actors": [
        {
          "name": "ActorCoreTransport",
          "optional": false
        },
        {
          "name": "ActorPedestal",
          "optional": false
        },
        {
          "name": "ActorHCD",
          "optional": false
        },
        {
          "name": "ActorCurrent",
          "optional": false
        },
        {
          "name": "ActorEquilibrium",
          "optional": false
        },
        {
          "name": "ActorSawteeth",
          "optional": false
        }
      ],
      "data_inputs": [
        "pulse_schedule",
        "core_profiles",
        "equilibrium"
      ],
      "usage_notes": [
        "Iterates between transport, equilibrium, current drive and pedestal calculations until convergence",
        "Convergence is based on relative changes in current and pressure profiles",
        "Minimum of 2 iterations performed unless max_iterations=1",
        "Warning issued if max iterations reached without convergence",
        "Updates equilibrium grids before each iteration",
        "Sets infinite time step for time-dependent actors (QED, FluxMatcher)"
      ],
      "key_parameters": {
        "max_iterations": "Maximum number of transport-equilibrium iterations (default: 5)",
        "verbose": "Enable verbose output during iterations",
        "convergence_error": "Convergence error threshold for relative change in current and pressure profiles (default: 5E-2)",
        "do_plot": "Enable plotting during iterations"
      },
      "category": "compound",
      "description": "Compound actor that iteratively solves for self-consistent stationary plasma solution by running transport, equilibrium, current drive, and pedestal actors",
      "hierarchy": "compound"
    },
    "ActorHCD": {
      "data_outputs": [
        "dd.ec_launcher",
        "dd.ic_antenna",
        "dd.lh_antenna",
        "dd.nbi",
        "dd.pellet",
        "dd.core_sources.source"
      ],
      "name": "ActorHCD",
      "physics_domain": "Heating, Current Drive, and Fueling Systems",
      "sub_actors": [
        {
          "name": "ec_actor",
          "optional": false
        },
        {
          "name": "ic_actor",
          "optional": false
        },
        {
          "name": "lh_actor",
          "optional": false
        },
        {
          "name": "nb_actor",
          "optional": false
        },
        {
          "name": "pellet_actor",
          "optional": false
        },
        {
          "name": "neutral_actor",
          "optional": false
        }
      ],
      "data_inputs": [
        "dd.pulse_schedule.ec.beam",
        "dd.ec_launchers.beam",
        "dd.pulse_schedule.ic.antenna",
        "dd.ic_antennas.antenna",
        "dd.pulse_schedule.lh.antenna",
        "dd.lh_antennas.antenna",
        "dd.pulse_schedule.nbi.unit",
        "dd.nbi.unit",
        "dd.pulse_schedule.pellet.launcher",
        "dd.pellets.launcher",
        "dd.equilibrium.time_slice",
        "dd.wall"
      ],
      "usage_notes": [
        "Neutral actor must be run last as it relies on tau_e_thermal calculation which depends on HCD sources",
        "Validates that pulse schedule and hardware arrays have matching lengths for all HCD systems",
        "Automatically calls IMAS.sources!(dd) to ensure source consistency",
        "Supports replay mode for all sub-actors using ActorReplay",
        "EC launcher hardware details are automatically filled when using ECsimple or TORBEAM models"
      ],
      "key_parameters": {
        "lh_model": "LH source actor to run (LHsimple, replay, none)",
        "pellet_model": "Pellet source actor to run (PLsimple, replay, none)",
        "ic_model": "IC source actor to run (ICsimple, replay, none)",
        "ec_model": "EC source actor to run (ECsimple, TORBEAM, replay, none)",
        "nb_model": "NB source actor to run (NBsimple, RABBIT, replay, none)",
        "neutral_model": "Neutral fueling actor to run (NEUCG, replay, none)"
      },
      "category": "hcd",
      "description": "Provides a common interface to run Heating, Current Drive, and fueling actors including EC, IC, LH, NB, pellet injection, and neutral fueling",
      "hierarchy": "compound"
    },
    "ActorQED": {
      "data_outputs": [
        "core_profiles.profiles_1d[].j_total",
        "core_profiles.profiles_1d[].j_non_inductive",
        "core_profiles.profiles_1d[].q"
      ],
      "name": "ActorQED",
      "physics_domain": "Current diffusion and plasma evolution",
      "sub_actors": [
        {
          "name": "ActorControllerIp",
          "optional": false
        }
      ],
      "data_inputs": [
        "equilibrium.time_slice[].global_quantities.vacuum_toroidal_field.b0",
        "core_sources",
        "core_profiles.profiles_1d[].grid.rho_tor_norm"
      ],
      "usage_notes": [
        "Actor operates at dd.global_time, time advance must be done outside",
        "Must call IMAS.new_timeslice! and update dd.global_time externally",
        "Fundamental quantity solved is j_total in core_profiles.profiles_1d",
        "Uses staircase approach for Ip control during current ramp",
        "Automatically handles sawtooth effects and q-profile constraints"
      ],
      "key_parameters": {
        "vloop_from": "Source for loop voltage data",
        "solve_for": "Solve for specified Ip or Vloop",
        "qmin_desired": "Keep minimum q-profile magnitude above this value",
        "ip_from": "Source for plasma current data",
        "Δt": "Evolution time step (Inf for steady state)",
        "Nt": "Number of time steps during evolution"
      },
      "category": "current",
      "description": "Evolves plasma current using the QED current diffusion solver",
      "hierarchy": "compound"
    },
    "ActorDynamicPlasma": {
      "data_outputs": [
        "core_profiles",
        "equilibrium",
        "core_sources",
        "core_transport",
        "pf_active"
      ],
      "name": "ActorDynamicPlasma",
      "physics_domain": "Time-dependent plasma simulation",
      "sub_actors": [
        {
          "name": "ActorCoreTransport",
          "optional": false
        },
        {
          "name": "ActorPedestal",
          "optional": true
        },
        {
          "name": "ActorHCD",
          "optional": false
        },
        {
          "name": "ActorCurrent",
          "optional": false
        },
        {
          "name": "ActorEquilibrium",
          "optional": false
        },
        {
          "name": "ActorPFactive",
          "optional": false
        },
        {
          "name": "ActorSawteeth",
          "optional": false
        }
      ],
      "data_inputs": [
        "core_profiles",
        "equilibrium",
        "pulse_schedule",
        "global_time"
      ],
      "usage_notes": [
        "Uses two-phase time stepping with half-step substeps for numerical stability",
        "Automatically handles time-dependent data trimming and creation of new time slices",
        "Progress tracking with detailed plasma parameters during evolution",
        "Coordinates multiple physics actors in proper sequence for self-consistent evolution",
        "Supports plasma current control via feedback controller or prescribed pulse schedule"
      ],
      "key_parameters": {
        "evolve_transport": "Whether to evolve transport equations",
        "evolve_pf_active": "Whether to evolve poloidal field currents",
        "ip_controller": "Use feedback controller for plasma current",
        "evolve_pedestal": "Whether to evolve pedestal physics",
        "evolve_current": "Whether to evolve plasma current",
        "evolve_equilibrium": "Whether to evolve MHD equilibrium",
        "time_derivatives_sources": "Include time-derivative source terms",
        "evolve_hcd": "Whether to evolve heating and current drive",
        "Δt": "Total evolution time step [s]",
        "Nt": "Number of sub-steps during evolution"
      },
      "category": "compound",
      "description": "Compound actor that evolves plasma in time by coordinating multiple sub-actors for transport, equilibrium, current drive, pedestal, and PF systems",
      "hierarchy": "compound"
    },
    "ActorPFactive": {
      "data_outputs": [
        "pf_active.coil.current",
        "equilibrium.time_slice.profiles_2d.psi"
      ],
      "name": "ActorPFactive",
      "physics_domain": "Poloidal field coil control and magnetic equilibrium",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "pulse_schedule.position_control",
        "pf_active",
        "build.oh.technology",
        "build.pf_active.technology",
        "wall"
      ],
      "usage_notes": [
        "Manipulates data in dd.pf_active directly",
        "Can handle both field null configurations and plasma solutions",
        "Uses least-squares optimization with regularization for current finding",
        "Supports multiple constraint types: boundary iso-flux, x-points (saddle), and strike points (flux)",
        "Automatically determines optimal regularization if not specified",
        "Can update the input equilibrium psi field if update_equilibrium=true"
      ],
      "key_parameters": {
        "strike_points_weight": "Weight given to strike-point constraints in optimization",
        "green_model": "Model used for coil Green function calculations (quad, linear, etc.)",
        "x_points_weight": "Weight given to x-point constraints in optimization",
        "update_equilibrium": "Whether to overwrite target equilibrium with achievable one",
        "λ_regularize": "Regularization parameter for current optimization"
      },
      "category": "pf",
      "description": "Finds optimal coil currents to match equilibrium boundary shape by solving control point constraints in a least-squares sense",
      "hierarchy": "single"
    },
    "ActorNeoclassical": {
      "data_outputs": [
        "core_transport.model.neoclassical"
      ],
      "name": "ActorNeoclassical",
      "physics_domain": "Neoclassical transport in fusion plasmas",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "core_profiles.profiles_1d"
      ],
      "usage_notes": [
        "Chang-Hinton model only computes ion energy flux",
        "NEO model computes electron/ion energy flux, particle flux, and momentum flux",
        "Hirshman-Sigmar model computes electron/ion energy and particle fluxes",
        "Equilibrium geometry is cached for Hirshman-Sigmar model to improve performance",
        "NEO calculations use asyncmap for parallel execution"
      ],
      "key_parameters": {
        "model": "Neoclassical model to run (changhinton, neo, hirshmansigmar)",
        "rho_transport": "rho_tor_norm values to compute neoclassical fluxes on"
      },
      "category": "transport",
      "description": "Evaluates neoclassical transport fluxes using various models including Chang-Hinton, NEO, and Hirshman-Sigmar",
      "hierarchy": "single"
    },
    "ActorFluxSwing": {
      "data_outputs": [
        "dd.build.flux_swing.rampup",
        "dd.build.flux_swing.flattop",
        "dd.build.flux_swing.pf",
        "dd.build.tf",
        "dd.build.oh"
      ],
      "name": "ActorFluxSwing",
      "physics_domain": "Magnetic field and flux swing analysis",
      "sub_actors": [],
      "data_inputs": [
        "dd.requirements.flattop_duration",
        "dd.requirements.coil_j_margin",
        "dd.equilibrium.time_slice",
        "dd.core_profiles.profiles_1d",
        "dd.core_profiles.global_quantities.ejima"
      ],
      "usage_notes": [
        "OH flux consumption estimates based on Ejima coefficient for rampup",
        "Can operate in two modes: fixed flattop duration or maximum OH current",
        "Includes vertical field contributions from PF coils",
        "Uses plasma inductance calculations for flux requirements"
      ],
      "key_parameters": {
        "operate_oh_at_j_crit": "If true, OH operates at current limit and flattop duration follows from that. If false, evaluates current needed for specified flattop duration"
      },
      "category": "build",
      "description": "Calculates OH flux swing requirements for plasma rampup, flattop operation, and vertical field contributions",
      "hierarchy": "single"
    },
    "ActorWPED": {
      "data_outputs": [
        "core_profiles.profiles_1d.electrons.temperature",
        "core_profiles.profiles_1d.ion.temperature"
      ],
      "name": "ActorWPED",
      "physics_domain": "Edge plasma physics and pedestal modeling",
      "sub_actors": [],
      "data_inputs": [
        "core_profiles.profiles_1d.electrons.temperature",
        "core_profiles.profiles_1d.ion.temperature",
        "core_profiles.profiles_1d.grid.rho_tor_norm"
      ],
      "usage_notes": [
        "Uses optimization to find temperature profiles that match target pedestal-to-core energy ratio",
        "Modifies last point of temperature profiles to match Te_sep boundary condition",
        "Requires rho_nml < rho_ped constraint for proper pedestal structure",
        "Can optionally plot temperature profiles before and after modification"
      ],
      "key_parameters": {
        "rho_ped": "Defines rho at which the pedestal region starts",
        "ped_to_core_fraction": "Ratio of edge (@rho=0.9) to core stored energy",
        "rho_nml": "Defines rho at which the no man's land region starts",
        "T_ratio_pedestal": "Ratio of ion to electron temperatures in pedestal region",
        "Te_sep": "Separatrix electron temperature"
      },
      "category": "pedestal",
      "description": "Finds the temperature profile at the edge to match the ped_to_core_fraction of stored energy by optimizing pedestal temperature profiles",
      "hierarchy": "single"
    },
    "ActorSimplePL": {
      "data_outputs": [
        "core_sources"
      ],
      "name": "ActorSimplePL",
      "physics_domain": "Pellet injection and particle fueling",
      "sub_actors": [],
      "data_inputs": [
        "pellet_launchers",
        "pulse_schedule",
        "equilibrium.time_slice",
        "core_profiles.profiles_1d",
        "pellets.launcher"
      ],
      "usage_notes": [
        "Reads pellet launcher configuration from dd.pellet_launchers and dd.pulse_schedule",
        "Stores particle deposition profiles in dd.core_sources",
        "Supports multiple pellet actuators with individual parameters",
        "Uses beta function profile for particle deposition with configurable peak location and width",
        "Material density data sourced from PAM model within OMFIT",
        "Supports DT, D, T, C, and Ne pellet species"
      ],
      "key_parameters": {
        "shape": "Pellet shape (spherical, cylindrical, rectangular)",
        "rho_0": "Desired radial location of the deposition profile (default: 0.5)",
        "frequency": "Pellet injection frequency from pulse schedule",
        "width": "Desired width of the deposition profile (default: 0.25)",
        "size": "Pellet dimensions based on shape"
      },
      "category": "hcd",
      "description": "Estimates pellet particle deposition using simple pellet actuator models",
      "hierarchy": "single"
    },
    "ActorVerticalStability": {
      "data_outputs": [
        "mhd_linear.time_slice.toroidal_mode"
      ],
      "name": "ActorVerticalStability",
      "physics_domain": "MHD stability analysis",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "pf_active",
        "pf_passive"
      ],
      "usage_notes": [
        "Requires active coils with non-zero current to compute stability metrics",
        "All coils (active and passive) must have valid resistance > 0 for normalized growth rate calculation",
        "Stability margin > 0.15 indicates vertical stability",
        "Normalized growth rate < 10 indicates vertical stability",
        "Uses VacuumFields package for stability calculations"
      ],
      "key_parameters": {
        "model": "Turn on/off model of vertical stability",
        "do_plot": "Display wireframe plot of passive structures considered for vertical stability"
      },
      "category": "stability",
      "description": "Computes vertical stability metrics including stability margin and normalized growth rate for plasma equilibrium",
      "hierarchy": "compound"
    },
    "ActorEquilibrium": {
      "data_outputs": [
        "equilibrium.time_slice",
        "equilibrium.time_slice.profiles_1d",
        "equilibrium.time_slice.profiles_2d",
        "equilibrium.time_slice.boundary",
        "equilibrium.time_slice.global_quantities"
      ],
      "name": "ActorEquilibrium",
      "physics_domain": "Magnetohydrodynamic equilibrium calculation and flux surface generation",
      "sub_actors": [
        {
          "name": "ActorTEQUILA",
          "optional": false
        },
        {
          "name": "ActorFRESCO",
          "optional": false
        },
        {
          "name": "ActorEGGO",
          "optional": false
        },
        {
          "name": "ActorCHEASE",
          "optional": false
        },
        {
          "name": "ActorReplay",
          "optional": false
        },
        {
          "name": "ActorNoOperation",
          "optional": false
        }
      ],
      "data_inputs": [
        "pulse_schedule.position_control",
        "core_profiles.profiles_1d",
        "equilibrium.time_slice",
        "wall",
        "pf_active.coil",
        "magnetics.b_field_pol_probe",
        "magnetics.flux_loop"
      ],
      "usage_notes": [
        "Automatically selects and configures the appropriate equilibrium solver based on model parameter",
        "Prepares equilibrium data structure by clearing and initializing with boundary conditions from position control",
        "Can force up-down symmetry but only when number of X-points is even",
        "Supports self-consistent iterations by taking profiles from core_profiles or re-solving with different solver using equilibrium profiles",
        "Adds flux surface information using first wall geometry",
        "Can restore experimental coil currents and magnetic measurements in replay mode"
      ],
      "key_parameters": {
        "vacuum_r0_b0_from": "Source for vacuum toroidal field parameters",
        "model": "Selection of equilibrium solver (TEQUILA, FRESCO, EGGO, CHEASE, replay, none)",
        "j_p_from": "Source for j_tor and pressure profiles (equilibrium or core_profiles)",
        "ip_from": "Source for plasma current",
        "symmetrize": "Force equilibrium up-down symmetry with respect to magnetic axis",
        "do_plot": "Enable plotting for debugging and visualization"
      },
      "category": "equilibrium",
      "description": "Provides a common interface to run different equilibrium actors including TEQUILA, FRESCO, EGGO, CHEASE, and replay modes",
      "hierarchy": "compound"
    },
    "ActorDivertors": {
      "data_outputs": [
        "divertors.divertor.target.power_conducted",
        "divertors.divertor.target.power_convected",
        "divertors.divertor.target.power_incident",
        "divertors.divertor.target.two_point_model.sol_heat_decay_length",
        "divertors.divertor.target.flux_expansion",
        "divertors.divertor.target.wetted_area",
        "divertors.divertor.target.tilt_angle_tor",
        "divertors.divertor.target.tilt_angle_pol",
        "divertors.divertor.target.power_flux_peak",
        "divertors.divertor.power_thermal_extracted"
      ],
      "name": "ActorDivertors",
      "physics_domain": "Boundary plasma physics and divertor thermal management",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "core_profiles.profiles_1d",
        "core_sources",
        "wall",
        "divertors"
      ],
      "usage_notes": [
        "Requires equilibrium and core profiles data to be available",
        "Calculates power loading for each divertor target based on SOL width and flux expansion",
        "Uses BoundaryPlasmaModels package for heat flux calculations",
        "Assumes power is split equally between upper and lower divertors (Psol/2)",
        "Updates divertor totals automatically from individual target calculations"
      ],
      "key_parameters": {
        "heat_flux_model": "Divertor heat flux model selection (lengyel or stangeby)",
        "heat_spread_factor": "Heat flux expansion factor in private flux region (>= 1.0)",
        "impurities": "Vector of impurity species to include in calculations",
        "impurities_fraction": "Vector of impurity fractions corresponding to species",
        "thermal_power_extraction_efficiency": "Fraction of thermal power extracted by coolant at divertor interface"
      },
      "category": "divertors",
      "description": "Evaluates divertor loading and deposited power using boundary plasma models",
      "hierarchy": "single"
    },
    "ActorSteadyStateCurrent": {
      "data_outputs": [
        "core_profiles.profiles_1d.j_total"
      ],
      "name": "ActorSteadyStateCurrent",
      "physics_domain": "Current Drive and Ohmic Heating",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "core_profiles.profiles_1d.conductivity_parallel",
        "core_profiles.profiles_1d.j_non_inductive",
        "core_profiles.profiles_1d.grid.rho_tor_norm"
      ],
      "usage_notes": [
        "The fundamental quantity being solved is j_total in core_profiles.profiles_1d",
        "If current_relaxation_radius > 0, blends between initial and fully relaxed ohmic current profiles",
        "When non-inductive current exceeds target and allow_floating_plasma_current is true, ohmic current is set to zero",
        "Uses conductivity_parallel from core_profiles to calculate steady-state ohmic current distribution"
      ],
      "key_parameters": {
        "allow_floating_plasma_current": "Zero loop voltage if non-inductive fraction exceeds 100% of the target Ip",
        "current_relaxation_radius": "Radial position at which the artificial ohmic current profile relaxation starts to kick in (0.0-1.0)",
        "ip_from": "Data flow parameter specifying source of plasma current target"
      },
      "category": "current",
      "description": "Evolves the ohmic current to steady state using the conductivity from core_profiles",
      "hierarchy": "single"
    },
    "ActorNeutralFueling": {
      "data_outputs": [
        "core_profiles.profiles_1d.neutral",
        "core_sources.source"
      ],
      "name": "ActorNeutralFueling",
      "physics_domain": "Neutral particle fueling and recycling",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "core_profiles.profiles_1d"
      ],
      "usage_notes": [
        "Based on K. Burrell model from Journal of Computational Physics 27.1 (1978): 88-102",
        "Calculates neutral density and particle sources from wall recycling",
        "Assumes equal particle sources from all hydrogenic ion species",
        "Uses charge exchange and electron impact ionization rates",
        "Particle confinement time is limited to maximum of 10 seconds"
      ],
      "key_parameters": {
        "T_wall": "Wall temperature in eV (default: 10.0)",
        "τp_over_τe": "Particle confinement time as fraction of energy confinement time (default: 0.5)"
      },
      "category": "hcd",
      "description": "Estimates neutral fueling deposition using the neucg model based on Burrell 1978",
      "hierarchy": "single"
    },
    "ActorFitProfiles": {
      "data_outputs": [
        "core_profiles"
      ],
      "name": "ActorFitProfiles",
      "physics_domain": "Experimental data processing and profile fitting",
      "sub_actors": [],
      "data_inputs": [
        "thomson_scattering",
        "charge_exchange",
        "interferometer",
        "equilibrium"
      ],
      "usage_notes": [
        "Removes outliers from raw experimental data using adaptive outlier removal",
        "Filters out divertor Thomson scattering data (D3D specific implementation)",
        "Calibrates Thomson scattering density using interferometer line-average measurements",
        "Enforces quasi-neutrality for ion densities using deuterium as bulk ion",
        "Creates profiles for electrons (Te, ne), ions (Ti, ni), rotation (ωtor), and effective charge",
        "Uses 2D fitting with spatial and temporal interpolation followed by 1D smoothing"
      ],
      "key_parameters": {
        "time_averaging": "Time averaging window for smoothing experimental data",
        "time_basis_ids": "Time basis to use - either equilibrium or core_profiles (default: core_profiles)",
        "rho_grid": "Number of radial grid points (default: 101)",
        "rho_averaging": "Radial (rho) averaging window for profile smoothing"
      },
      "category": "diagnostics",
      "description": "Fits experimental diagnostic data (Thomson scattering, charge exchange, interferometer) to create smooth plasma profiles on a common time and spatial grid",
      "hierarchy": "compound"
    },
    "ActorCurrent": {
      "data_outputs": [
        "core_profiles.profiles_1d[].j_total",
        "core_profiles.profiles_1d[].j_ohmic",
        "core_profiles.profiles_1d[].j_tor",
        "equilibrium.time_slice[].profiles_1d.j_parallel",
        "core_sources.source[].profiles_1d"
      ],
      "name": "ActorCurrent",
      "physics_domain": "plasma current evolution and ohmic heating",
      "sub_actors": [
        {
          "name": "ActorSteadyStateCurrent",
          "optional": true
        },
        {
          "name": "ActorQED",
          "optional": true
        },
        {
          "name": "ActorReplay",
          "optional": true
        },
        {
          "name": "ActorNoOperation",
          "optional": true
        }
      ],
      "data_inputs": [
        "core_profiles.profiles_1d[].j_bootstrap",
        "core_profiles.profiles_1d[].j_non_inductive",
        "global_time"
      ],
      "usage_notes": [
        "Freezes j_bootstrap and j_non_inductive before updating j_ohmic",
        "Automatically updates bootstrap and ohmic current sources in core_sources",
        "The fundamental quantity solved is j_total in core_profiles.profiles_1d",
        "Different models available for different physics fidelity levels"
      ],
      "key_parameters": {
        "vloop_from": "Data source for loop voltage (vloop)",
        "model": "Switch between SteadyStateCurrent, QED, replay, or none current evolution models",
        "ip_from": "Data source for plasma current (ip)"
      },
      "category": "current",
      "description": "Provides a common interface to run multiple ohmic current evolution actors, solving for j_total in core_profiles",
      "hierarchy": "compound"
    },
    "ActorSOL": {
      "data_outputs": [],
      "name": "ActorSOL",
      "physics_domain": "Scrape-Off Layer plasma physics and edge transport",
      "sub_actors": [
        {
          "name": "ActorSOLBox",
          "optional": true
        },
        {
          "name": "ActorReplay",
          "optional": true
        },
        {
          "name": "ActorNoOperation",
          "optional": true
        }
      ],
      "data_inputs": [],
      "usage_notes": [
        "Uses a switch pattern to select between different SOL modeling approaches",
        "Only one sub-actor is active at a time based on the model parameter",
        "Automatically steps and finalizes the selected sub-actor"
      ],
      "key_parameters": {
        "model": "Switch between different SOL models: :box (box model), :replay (replay data), :none (no operation)"
      },
      "category": "sol",
      "description": "Provides a common interface to run different Scrape-Off Layer (SOL) actors with switchable models",
      "hierarchy": "compound"
    },
    "ActorSimpleIC": {
      "data_outputs": [
        "dd.waves.coherent_wave",
        "dd.core_sources.source"
      ],
      "name": "ActorSimpleIC",
      "physics_domain": "Ion cyclotron heating and current drive",
      "sub_actors": [],
      "data_inputs": [
        "dd.ic_antennas",
        "dd.pulse_schedule.ic",
        "dd.equilibrium.time_slice",
        "dd.core_profiles.profiles_1d"
      ],
      "usage_notes": [
        "Current drive efficiency based on GASC model from G. Tonon paper",
        "Assumes 80% power fraction to ions for FPP cases with minority heating",
        "Uses fast ion thermalization time for beam power smoothing",
        "Supports multiple IC antennas through actuator array"
      ],
      "key_parameters": {
        "rho_0": "Desired radial location of the deposition profile (default: 0.0)",
        "width": "Desired width of the deposition profile (default: 0.1)",
        "ηcd_scale": "Scaling factor for nominal current drive efficiency (default: 1.0)"
      },
      "category": "hcd",
      "description": "Estimates ion-cyclotron electron/ion energy deposition and current drive as a gaussian profile",
      "hierarchy": "single"
    },
    "ActorTroyonBetaNN": {
      "data_outputs": [
        "mhd_linear.time_slice.toroidal_mode"
      ],
      "name": "ActorTroyonBetaNN",
      "physics_domain": "MHD stability analysis",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "equilibrium.time_slice.boundary.triangularity"
      ],
      "usage_notes": [
        "Actor is disabled for negative triangularity plasmas",
        "Uses TroyonBetaNN package for neural network-based beta limit calculations",
        "Calculates multiple toroidal mode numbers (n) for stability assessment",
        "Outputs Troyon beta limits for no-wall scenarios"
      ],
      "key_parameters": {
        "verbose": "Enable verbose output during calculations",
        "do_plot": "Enable plotting functionality"
      },
      "category": "stability",
      "description": "Evaluates the low-n no-wall ideal MHD stability using neural network models for Troyon beta limits",
      "hierarchy": "single"
    },
    "ActorFluxMatcher": {
      "data_outputs": [
        "core_profiles.profiles_1d.electrons.temperature",
        "core_profiles.profiles_1d.t_i_average",
        "core_profiles.profiles_1d.electrons.density_thermal",
        "core_profiles.profiles_1d.ion.density_thermal",
        "core_profiles.profiles_1d.rotation_frequency_tor_sonic",
        "transport_solver_numerics.convergence"
      ],
      "name": "ActorFluxMatcher",
      "physics_domain": "Transport flux matching and profile evolution",
      "sub_actors": [
        {
          "name": "ActorFluxCalculator",
          "optional": false
        },
        {
          "name": "ActorReplay",
          "optional": true
        },
        {
          "name": "ActorPedestal",
          "optional": true
        }
      ],
      "data_inputs": [
        "core_profiles.profiles_1d",
        "core_transport",
        "core_sources",
        "pulse_schedule"
      ],
      "usage_notes": [
        "Requires at least one transport actor (neoclassical or turbulent) to be active",
        "For rotation evolution, uses TGYRO approach with normalized rotation shear",
        "Density evolution supports complex species-specific evolution strategies",
        "Algorithm choice affects convergence behavior and computational cost",
        "Can replay profiles from replay_dd when evolution mode is set to :replay",
        "Supports scaling turbulent transport to match H-factor targets"
      ],
      "key_parameters": {
        "max_iterations": "Maximum optimizer iterations (default: 0)",
        "evolve_rotation": "Rotation evolution mode (:flux_match, :fixed, :replay)",
        "xtol": "Tolerance on solution vector (default: 1E-3)",
        "scale_turbulence_law": "Scale turbulent transport to achieve confinement law (:h98, :ds03)",
        "algorithm": "Optimization algorithm (:basic_polyalg, :polyalg, :broyden, etc.)",
        "rho_transport": "Transport grid points (default: 0.25:0.1:0.85)",
        "step_size": "Algorithm iteration step size (default: 1.0)",
        "evolve_Te": "Electron temperature evolution mode (:flux_match, :fixed, :replay)",
        "relax": "Relaxation on final solution (default: 1.0)",
        "evolve_Ti": "Ion temperature evolution mode (:flux_match, :fixed, :replay)",
        "evolve_densities": "Density evolution specification (symbol or dictionary)"
      },
      "category": "transport",
      "description": "Evaluates transport fluxes and source fluxes and minimizes flux matching error through iterative profile evolution",
      "hierarchy": "compound"
    },
    "ActorSOLBox": {
      "data_outputs": [
        "edge_profiles.profiles_1d.electrons.density",
        "edge_profiles.profiles_1d.electrons.temperature"
      ],
      "name": "ActorSOLBox",
      "physics_domain": "Scrape-off layer physics and divertor target conditions",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "core_profiles.profiles_1d",
        "core_sources",
        "wall",
        "divertors.divertor.target.tile.surface_outline"
      ],
      "usage_notes": [
        "Based on X. Zhang et al. SOL box model (https://doi.org/10.1016/j.nme.2022.101354)",
        "Automatically determines single vs double null configuration based on magnetic balance",
        "Uses Eich scaling for λq when set to infinity",
        "Calculates upstream conditions at separatrix and target conditions for divertor",
        "Requires equilibrium and core profiles data for boundary condition calculations"
      ],
      "key_parameters": {
        "recycling_coeff_i": "Ion particle recycling coefficient",
        "κ0_i": "Coefficient of ion conductivity",
        "Ti_t": "Ion temperature at the target (eV)",
        "frac_mom": "Fraction of momentum lost due to collisions with neutrals and viscous forces",
        "λq": "Width of the flux tube (m)",
        "Te_t": "Electron temperature at the target (eV)",
        "frac_cond": "Fraction of power carried by electron conduction",
        "κ0_e": "Coefficient of electron conductivity",
        "recycling_coeff_e": "Electron particle recycling coefficient"
      },
      "category": "sol",
      "description": "0D box model for the scrape-off layer based on X. Zhang et al. model for calculating upstream and target plasma conditions",
      "hierarchy": "single"
    },
    "ActorEPED": {
      "data_outputs": [
        "core_profiles.profiles_1d.electrons.temperature",
        "core_profiles.profiles_1d.ion.temperature",
        "core_profiles.profiles_1d.t_i_average"
      ],
      "name": "ActorEPED",
      "physics_domain": "Edge plasma physics and pedestal transport",
      "sub_actors": [],
      "data_inputs": [
        "core_profiles.profiles_1d.electrons.density_thermal",
        "core_profiles.profiles_1d.grid.rho_tor_norm",
        "core_profiles.profiles_1d.grid.psi_norm",
        "equilibrium.time_slice.global_quantities.vacuum_toroidal_field",
        "equilibrium.time_slice.boundary",
        "equilibrium.time_slice.profiles_1d.r_outboard",
        "equilibrium.time_slice.profiles_1d.r_inboard",
        "equilibrium.time_slice.profiles_1d.elongation",
        "equilibrium.time_slice.profiles_1d.triangularity_upper",
        "equilibrium.time_slice.profiles_1d.triangularity_lower"
      ],
      "usage_notes": [
        "EPED-NN is only trained on effective mass 2.0 and 2.5 (H and D)",
        "Results can be sensitive to triangularity parameters due to contouring issues",
        "Uses flux surface inside LCFS rather than LCFS itself to avoid sensitivity",
        "Pedestal density conversion uses tanh profile assumptions",
        "Warns if pedestal pressure is lower than separatrix pressure"
      ],
      "key_parameters": {
        "rho_ped": "Defines rho at which the pedestal region starts",
        "only_powerlaw": "Use power-law pedestal fit without NN correction (default true)",
        "rho_nml": "Defines rho at which the no man's land region starts",
        "warn_nn_train_bounds": "Warn if querying outside NN training range (default false)",
        "T_ratio_pedestal": "Ratio of ion to electron temperatures",
        "Te_sep": "Separatrix electron temperature (default 80.0 eV)",
        "ped_factor": "Pedestal height multiplier (width scaled by sqrt of factor, default 1.0)"
      },
      "category": "pedestal",
      "description": "Evaluates pedestal boundary conditions (height and width) using EPED neural network model",
      "hierarchy": "single"
    },
    "ActorTEQUILA": {
      "data_outputs": [
        "equilibrium.vacuum_toroidal_field.r0",
        "equilibrium.vacuum_toroidal_field.b0",
        "equilibrium.time_slice.boundary.geometric_axis.r",
        "equilibrium.time_slice.boundary.geometric_axis.z",
        "equilibrium.time_slice.global_quantities.magnetic_axis.r",
        "equilibrium.time_slice.global_quantities.magnetic_axis.z",
        "equilibrium.time_slice.profiles_1d.psi",
        "equilibrium.time_slice.profiles_1d.pressure",
        "equilibrium.time_slice.profiles_1d.dpressure_dpsi",
        "equilibrium.time_slice.profiles_1d.f",
        "equilibrium.time_slice.profiles_1d.f_df_dpsi",
        "equilibrium.time_slice.profiles_2d",
        "equilibrium.time_slice.global_quantities.free_boundary",
        "pf_active.coil"
      ],
      "name": "ActorTEQUILA",
      "physics_domain": "MHD equilibrium reconstruction and flux surface calculations",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice.profiles_1d.psi_norm",
        "equilibrium.time_slice.profiles_1d.pressure",
        "equilibrium.time_slice.profiles_1d.j_tor",
        "equilibrium.time_slice.profiles_1d.rho_tor_norm",
        "equilibrium.time_slice.boundary.outline.r",
        "equilibrium.time_slice.boundary.outline.z",
        "equilibrium.time_slice.global_quantities.ip",
        "equilibrium.time_slice.global_quantities.vacuum_toroidal_field.b0",
        "equilibrium.time_slice.global_quantities.vacuum_toroidal_field.r0",
        "equilibrium.time_slice.boundary.strike_point",
        "equilibrium.time_slice.boundary.x_point",
        "pf_active.coil",
        "build"
      ],
      "usage_notes": [
        "Uses MXH flux surface parametrization for equilibrium representation",
        "Can reuse flux surface information if boundary has not changed significantly",
        "Prevents current from changing sign relative to target plasma current",
        "For free boundary mode, requires active PF coil system and control points",
        "Grid dimensions automatically determined from plasma size if R/Z not specified",
        "Includes boundary curvature limiting and resampling for numerical stability"
      ],
      "key_parameters": {
        "Z": "Psi Z axis for grid definition",
        "number_of_iterations": "Number of TEQUILA iterations",
        "relax": "Relaxation on the Picard iterations",
        "free_boundary": "Convert fixed boundary equilibrium to free boundary one",
        "number_of_fourier_modes": "Number of modes for Fourier decomposition",
        "number_of_radial_grid_points": "Number of TEQUILA radial grid points",
        "number_of_MXH_harmonics": "Number of Fourier harmonics in MXH representation of flux surfaces",
        "fixed_grid": "Fix P and Jt on this rho grid (poloidal or toroidal)",
        "R": "Psi R axis for grid definition",
        "tolerance": "Tolerance for terminating iterations"
      },
      "category": "equilibrium",
      "description": "Fixed boundary equilibrium solver using TEQUILA with optional conversion to free boundary",
      "hierarchy": "compound"
    },
    "ActorEGGO": {
      "data_outputs": [
        "equilibrium.time_slice.profiles_2d.psi",
        "equilibrium.time_slice.global_quantities.free_boundary"
      ],
      "name": "ActorEGGO",
      "physics_domain": "Magnetohydrodynamic equilibrium and free boundary reconstruction",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice.profiles_1d.psi_norm",
        "equilibrium.time_slice.profiles_1d.dpressure_dpsi",
        "equilibrium.time_slice.profiles_1d.f_df_dpsi",
        "equilibrium.time_slice.global_quantities.ip",
        "equilibrium.time_slice.boundary.outline.r",
        "equilibrium.time_slice.boundary.outline.z",
        "equilibrium.time_slice.global_quantities.vacuum_toroidal_field.b0",
        "equilibrium.time_slice.global_quantities.vacuum_toroidal_field.r0",
        "equilibrium.time_slice.profiles_1d.pressure",
        "wall",
        "pf_active"
      ],
      "usage_notes": [
        "Uses machine learning based approach for fast free boundary equilibrium reconstruction",
        "Requires pre-trained neural network models and basis functions",
        "Solution averaging with previous time slices is used for robustness until EGGO becomes more stable",
        "Integrates with VacuumFields package for coil modeling",
        "Supports both default and vacuum field Green's function tables"
      ],
      "key_parameters": {
        "model": "Neural network model to be used for equilibrium reconstruction",
        "timeslice_average": "Number of time slices to average for solution stability",
        "use_vacuumfield_green": "Use Vacuum Fields green's function tables instead of default",
        "decimate_boundary": "Parameter to decimate number of boundary points for computational efficiency",
        "debug": "Print debug information during EGGO solve"
      },
      "category": "equilibrium",
      "description": "ML-based free boundary equilibrium solver using EGGO (neural network model for tokamak equilibrium reconstruction)",
      "hierarchy": "compound"
    },
    "ActorSimpleLH": {
      "data_outputs": [
        "dd.waves.coherent_wave",
        "dd.core_sources.source"
      ],
      "name": "ActorSimpleLH",
      "physics_domain": "Lower hybrid current drive and heating",
      "sub_actors": [],
      "data_inputs": [
        "dd.lh_antennas",
        "dd.pulse_schedule.lh",
        "dd.equilibrium.time_slice",
        "dd.core_profiles.profiles_1d"
      ],
      "usage_notes": [
        "Current drive efficiency is based on GASC model from G. Tonon paper",
        "Uses Gaussian profile for power deposition",
        "Automatically handles multiple LH antennas from pulse schedule",
        "Requires equilibrium and core profiles data to be available"
      ],
      "key_parameters": {
        "rho_0": "Desired radial location of the deposition profile (default: 0.8)",
        "width": "Desired width of the deposition profile (default: 0.05)",
        "ηcd_scale": "Scaling factor for nominal current drive efficiency (default: 1.0)"
      },
      "category": "hcd",
      "description": "Estimates Lower Hybrid (LH) electron energy deposition and current drive as a Gaussian profile",
      "hierarchy": "single"
    },
    "ActorTGLF": {
      "data_outputs": [
        "core_transport.model.profiles_1d"
      ],
      "name": "ActorTGLF",
      "physics_domain": "Turbulent transport and gyrokinetic modeling",
      "sub_actors": [],
      "data_inputs": [
        "core_profiles.profiles_1d",
        "equilibrium.time_slice"
      ],
      "usage_notes": [
        "Supports multiple turbulent transport models (TGLF, TGLFNN, GKNN, TJLF)",
        "Neural network models (TGLFNN, GKNN) provide faster evaluation than full TGLF",
        "ONNX acceleration available for production runs",
        "Custom input files can override default parameters",
        "Outputs electron/ion energy fluxes, particle fluxes, and momentum flux",
        "Training bounds warnings available for neural network models"
      ],
      "key_parameters": {
        "lump_ions": "Combine fuel species (D,T) and impurities together",
        "electromagnetic": "Use electromagnetic vs electrostatic approximation",
        "model": "Implementation choice: TGLF, TGLFNN, GKNN, or TJLF (default: TGLFNN)",
        "onnx_model": "Use ONNX neural network model for acceleration",
        "tglfnn_model": "Specific TGLF-NN model selection",
        "sat_rule": "Saturation rule for transport calculations (sat0, sat1, sat2, sat3)",
        "rho_transport": "Radial grid points for flux calculations (default: 0.25:0.1:0.85)"
      },
      "category": "transport",
      "description": "Evaluates TGLF predicted turbulent transport fluxes for plasma core transport modeling",
      "hierarchy": "single"
    },
    "ActorReplay": {
      "data_outputs": [],
      "name": "ActorReplay",
      "physics_domain": "Data replay and simulation reproducibility",
      "sub_actors": [],
      "data_inputs": [
        "replay_dd"
      ],
      "usage_notes": [
        "Meant to be used as a specific model in generic actors",
        "Behavior is defined by dispatch on _step and _finalize functions with specific actor types",
        "Can wrap any AbstractActor to replay its past behavior",
        "Requires implementation of _step and _finalize methods for specific actor combinations"
      ],
      "key_parameters": {
        "replay_dd": "Entry containing the IMAS DD object to replay data from",
        "base_actor": "The underlying actor whose behavior is being replayed"
      },
      "category": "uncategorized",
      "description": "Actor for replaying past behavior from previously stored data",
      "hierarchy": "single"
    },
    "ActorBalanceOfPlant": {
      "data_outputs": [
        "dd.balance_of_plant.time",
        "dd.balance_of_plant.power_plant.heat_load.breeder",
        "dd.balance_of_plant.power_plant.heat_load.divertor",
        "dd.balance_of_plant.power_plant.heat_load.wall"
      ],
      "name": "ActorBalanceOfPlant",
      "physics_domain": "Power plant systems and electrical balance",
      "sub_actors": [
        {
          "name": "ActorThermalPlant",
          "optional": false
        },
        {
          "name": "ActorPowerNeeds",
          "optional": false
        }
      ],
      "data_inputs": [
        "dd.global_time",
        "dd.blanket.module",
        "dd.divertors.divertor",
        "dd.core_sources"
      ],
      "usage_notes": [
        "Stores data in dd.balance_of_plant",
        "Automatically calculates heat loads from breeder blanket, divertors, and wall radiation losses",
        "Coordinates thermal plant and power needs calculations to determine net electrical output"
      ],
      "key_parameters": {},
      "category": "balance_plant",
      "description": "Balance of plant actor that estimates the net electrical power output by comparing the balance of plant electrical needs with the electricity generated from the thermal cycle",
      "hierarchy": "compound"
    },
    "ActorTORBEAM": {
      "data_outputs": [
        "core_sources"
      ],
      "name": "ActorTORBEAM",
      "physics_domain": "Electron cyclotron heating and current drive",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium",
        "core_profiles"
      ],
      "usage_notes": [
        "Uses the TORBEAM code for EC wave calculations",
        "Requires equilibrium and core profiles data to be available",
        "Automatically runs TORBEAM simulation during step execution"
      ],
      "key_parameters": {
        "torbeam_params": "TORBEAM-specific calculation parameters"
      },
      "category": "ec",
      "description": "TORBEAM electron cyclotron heating and current drive actor that calculates EC wave propagation and absorption",
      "hierarchy": "single"
    },
    "ActorRABBIT": {
      "data_outputs": [
        "dd.nbi.unit.power_launched.data",
        "dd.core_sources.source"
      ],
      "name": "ActorRABBIT",
      "physics_domain": "Neutral beam injection physics and fast particle deposition",
      "sub_actors": [],
      "data_inputs": [
        "dd.build.layer",
        "dd.equilibrium.time_slice",
        "dd.core_profiles.profiles_1d",
        "dd.pulse_schedule.nbi.unit",
        "dd.nbi.unit"
      ],
      "usage_notes": [
        "Requires vessel high-field-side and low-field-side radii from build layer",
        "Processes multiple time slices for time-dependent beam deposition analysis",
        "Calculates electron heating, ion heating, particle deposition, parallel current, and toroidal momentum",
        "Adds fast ion particles source to core_sources",
        "Converts units from eV to keV and cm³ to m³ for RABBIT compatibility",
        "Uses rho_tor inside LCFS and rho_pol outside for spatial coordinates"
      ],
      "key_parameters": {
        "Δt_history": "Amount of history to include such that simulation proceeds from (dd.global_time - Δt_history) to dd.global_time",
        "remove_inputs": "Delete directory containing RABBIT input files after run"
      },
      "category": "nbi",
      "description": "RABBIT neutral beam injection actor that calculates beam deposition, heating, current drive, and torque profiles",
      "hierarchy": "single"
    },
    "ActorBlanket": {
      "data_outputs": [
        "blanket.module",
        "blanket.tritium_breeding_ratio"
      ],
      "name": "ActorBlanket",
      "physics_domain": "Neutronics and tritium breeding",
      "sub_actors": [],
      "data_inputs": [
        "equilibrium.time_slice",
        "neutronics.time_slice",
        "neutronics.first_wall",
        "neutronics.wall_loading",
        "build.layer",
        "build.structure",
        "requirements.tritium_breeding_ratio"
      ],
      "usage_notes": [
        "Requires blanket layers to be present in build structure",
        "Optimizes layer thicknesses to achieve target TBR while minimizing neutron leakage",
        "Uses NNeutronics package for neutronics calculations",
        "Handles both HFS and LFS blanket modules",
        "Calculates effective thickness based on neutron flux direction"
      ],
      "key_parameters": {
        "blanket_multiplier": "Neutron thermal power multiplier in blanket (default: 1.2)",
        "minimum_first_wall_thickness": "Minimum first wall thickness (default: 0.02 m)",
        "max_Li6_enrichment_fraction": "Maximum allowed Li6 enrichment fraction (default: 0.9)",
        "thermal_power_extraction_efficiency": "Fraction of thermal power carried out by coolant (default: 1.0)"
      },
      "category": "nuclear",
      "description": "Evaluates blanket tritium breeding ratio (TBR), heat deposition, and neutron leakage for fusion reactor blankets",
      "hierarchy": "compound"
    }
  },
  "metadata": {
    "version": "1.0.0",
    "total_actors": 60,
    "categories": 19,
    "compound_actors": 27,
    "generated_at": "2025-08-28T12:19:39.567",
    "extraction_method": "claude_analysis",
    "single_actors": 33
  },
  "categories": {
    "costing": [
      "ActorCostingARIES",
      "ActorCosting",
      "ActorCostingSheffield"
    ],
    "build": [
      "ActorCXbuild",
      "ActorFluxSwing",
      "ActorHFSsizing",
      "ActorLFSsizing",
      "ActorStresses"
    ],
    "divertors": [
      "ActorDivertors"
    ],
    "pedestal": [
      "ActorEPED",
      "ActorWPED",
      "ActorAnalyticPedestal",
      "ActorPedestal"
    ],
    "current": [
      "ActorCurrent",
      "ActorQED",
      "ActorSteadyStateCurrent"
    ],
    "balance_plant": [
      "ActorBalanceOfPlant",
      "ActorPowerNeeds",
      "ActorThermalPlant"
    ],
    "transport": [
      "ActorAnalyticTurbulence",
      "ActorCoreTransport",
      "ActorEPEDprofiles",
      "ActorFluxCalculator",
      "ActorFluxMatcher",
      "ActorNeoclassical",
      "ActorQLGYRO",
      "ActorSawteeth",
      "ActorTGLF"
    ],
    "wall_loading": [
      "ActorCoreRadHeatFlux",
      "ActorParticleHeatFlux"
    ],
    "sol": [
      "ActorSOL",
      "ActorSOLBox"
    ],
    "stability": [
      "ActorPlasmaLimits",
      "ActorTroyonBetaNN",
      "ActorVerticalStability"
    ],
    "equilibrium": [
      "ActorCHEASE",
      "ActorEGGO",
      "ActorEquilibrium",
      "ActorFRESCO",
      "ActorTEQUILA"
    ],
    "hcd": [
      "ActorHCD",
      "ActorSimpleIC",
      "ActorSimpleLH",
      "ActorNeutralFueling",
      "ActorSimplePL"
    ],
    "uncategorized": [
      "ActorNoOperation",
      "ActorReplay"
    ],
    "diagnostics": [
      "ActorFitProfiles"
    ],
    "nuclear": [
      "ActorBlanket",
      "ActorNeutronics"
    ],
    "compound": [
      "ActorDynamicPlasma",
      "ActorStationaryPlasma",
      "ActorWholeFacility"
    ],
    "ec": [
      "ActorSimpleEC",
      "ActorTORBEAM"
    ],
    "pf": [
      "ActorPFactive",
      "ActorPFdesign",
      "ActorPassiveStructures"
    ],
    "nbi": [
      "ActorSimpleNB",
      "ActorRABBIT"
    ]
  },
  "hierarchy": {
    "compound": [
      "ActorFRESCO",
      "ActorPedestal",
      "ActorPFdesign",
      "ActorPlasmaLimits",
      "ActorEPEDprofiles",
      "ActorCosting",
      "ActorCHEASE",
      "ActorWholeFacility",
      "ActorCXbuild",
      "ActorCoreTransport",
      "ActorThermalPlant",
      "ActorFluxCalculator",
      "ActorHFSsizing",
      "ActorStationaryPlasma",
      "ActorHCD",
      "ActorQED",
      "ActorDynamicPlasma",
      "ActorVerticalStability",
      "ActorEquilibrium",
      "ActorFitProfiles",
      "ActorCurrent",
      "ActorSOL",
      "ActorFluxMatcher",
      "ActorTEQUILA",
      "ActorEGGO",
      "ActorBalanceOfPlant",
      "ActorBlanket"
    ],
    "single": [
      "ActorPowerNeeds",
      "ActorSawteeth",
      "ActorStresses",
      "ActorCostingSheffield",
      "ActorNoOperation",
      "ActorCostingARIES",
      "ActorCoreRadHeatFlux",
      "ActorPassiveStructures",
      "ActorLFSsizing",
      "ActorNeutronics",
      "ActorAnalyticPedestal",
      "ActorSimpleEC",
      "ActorParticleHeatFlux",
      "ActorAnalyticTurbulence",
      "ActorQLGYRO",
      "ActorSimpleNB",
      "ActorPFactive",
      "ActorNeoclassical",
      "ActorFluxSwing",
      "ActorWPED",
      "ActorSimplePL",
      "ActorDivertors",
      "ActorSteadyStateCurrent",
      "ActorNeutralFueling",
      "ActorSimpleIC",
      "ActorTroyonBetaNN",
      "ActorSOLBox",
      "ActorEPED",
      "ActorSimpleLH",
      "ActorTGLF",
      "ActorReplay",
      "ActorTORBEAM",
      "ActorRABBIT"
    ]
  }
}
